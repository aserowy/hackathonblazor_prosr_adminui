//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Projects\hackathonblazor_prosr_adminui\prosr.Parser\Parser\Prosr1.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class Prosr1Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, SYNTAX=13, PACKAGE=14, MESSAGE=15, HUB=16, 
		ACTION=17, CALLS=18, ON=19, REPEATED=20, TYPE=21, IDENT=22, NUMBER=23, 
		WHITESPACE=24;
	public const int
		RULE_content = 0, RULE_syntax = 1, RULE_definition = 2, RULE_pkg = 3, 
		RULE_hub = 4, RULE_sending = 5, RULE_sendingMessageIdent = 6, RULE_sendingTarget = 7, 
		RULE_returning = 8, RULE_returningMessageIdent = 9, RULE_returningTarget = 10, 
		RULE_message = 11, RULE_field = 12, RULE_typeIdent = 13, RULE_quote = 14, 
		RULE_fieldIdent = 15, RULE_fullIdent = 16, RULE_hubIdent = 17, RULE_messageIdent = 18, 
		RULE_packageIdent = 19, RULE_returningIdent = 20, RULE_sendingIdent = 21;
	public static readonly string[] ruleNames = {
		"content", "syntax", "definition", "pkg", "hub", "sending", "sendingMessageIdent", 
		"sendingTarget", "returning", "returningMessageIdent", "returningTarget", 
		"message", "field", "typeIdent", "quote", "fieldIdent", "fullIdent", "hubIdent", 
		"messageIdent", "packageIdent", "returningIdent", "sendingIdent"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'prosr1'", "';'", "'{'", "'}'", "'('", "')'", "'caller'", 
		"'all'", "'''", "'\"'", "'.'", "'syntax'", "'package'", "'message'", "'hub'", 
		"'action'", "'calls'", "'on'", "'repeated'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "SYNTAX", "PACKAGE", "MESSAGE", "HUB", "ACTION", "CALLS", "ON", 
		"REPEATED", "TYPE", "IDENT", "NUMBER", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Prosr1.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static Prosr1Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Prosr1Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Prosr1Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ContentContext : ParserRuleContext {
		public SyntaxContext syntax() {
			return GetRuleContext<SyntaxContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(Prosr1Parser.Eof, 0); }
		public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public ContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_content; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitContent(this);
		}
	}

	[RuleVersion(0)]
	public ContentContext content() {
		ContentContext _localctx = new ContentContext(Context, State);
		EnterRule(_localctx, 0, RULE_content);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; syntax();
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PACKAGE) | (1L << MESSAGE) | (1L << HUB))) != 0)) {
				{
				{
				State = 45; definition();
				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 51; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyntaxContext : ParserRuleContext {
		public ITerminalNode SYNTAX() { return GetToken(Prosr1Parser.SYNTAX, 0); }
		public QuoteContext[] quote() {
			return GetRuleContexts<QuoteContext>();
		}
		public QuoteContext quote(int i) {
			return GetRuleContext<QuoteContext>(i);
		}
		public SyntaxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntax; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterSyntax(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitSyntax(this);
		}
	}

	[RuleVersion(0)]
	public SyntaxContext syntax() {
		SyntaxContext _localctx = new SyntaxContext(Context, State);
		EnterRule(_localctx, 2, RULE_syntax);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(SYNTAX);
			State = 54; Match(T__0);
			State = 55; quote();
			State = 56; Match(T__1);
			State = 57; quote();
			State = 58; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public PkgContext pkg() {
			return GetRuleContext<PkgContext>(0);
		}
		public HubContext hub() {
			return GetRuleContext<HubContext>(0);
		}
		public MessageContext message() {
			return GetRuleContext<MessageContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PACKAGE:
				{
				State = 60; pkg();
				}
				break;
			case HUB:
				{
				State = 61; hub();
				}
				break;
			case MESSAGE:
				{
				State = 62; message();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PkgContext : ParserRuleContext {
		public ITerminalNode PACKAGE() { return GetToken(Prosr1Parser.PACKAGE, 0); }
		public FullIdentContext fullIdent() {
			return GetRuleContext<FullIdentContext>(0);
		}
		public PkgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pkg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterPkg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitPkg(this);
		}
	}

	[RuleVersion(0)]
	public PkgContext pkg() {
		PkgContext _localctx = new PkgContext(Context, State);
		EnterRule(_localctx, 6, RULE_pkg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; Match(PACKAGE);
			State = 66; fullIdent();
			State = 67; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HubContext : ParserRuleContext {
		public ITerminalNode HUB() { return GetToken(Prosr1Parser.HUB, 0); }
		public HubIdentContext hubIdent() {
			return GetRuleContext<HubIdentContext>(0);
		}
		public SendingContext[] sending() {
			return GetRuleContexts<SendingContext>();
		}
		public SendingContext sending(int i) {
			return GetRuleContext<SendingContext>(i);
		}
		public ReturningContext[] returning() {
			return GetRuleContexts<ReturningContext>();
		}
		public ReturningContext returning(int i) {
			return GetRuleContext<ReturningContext>(i);
		}
		public HubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterHub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitHub(this);
		}
	}

	[RuleVersion(0)]
	public HubContext hub() {
		HubContext _localctx = new HubContext(Context, State);
		EnterRule(_localctx, 8, RULE_hub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(HUB);
			State = 70; hubIdent();
			State = 71; Match(T__3);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 74;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ACTION:
					{
					State = 72; sending();
					}
					break;
				case CALLS:
					{
					State = 73; returning();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ACTION || _la==CALLS );
			State = 78; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendingContext : ParserRuleContext {
		public ITerminalNode ACTION() { return GetToken(Prosr1Parser.ACTION, 0); }
		public SendingIdentContext sendingIdent() {
			return GetRuleContext<SendingIdentContext>(0);
		}
		public SendingMessageIdentContext sendingMessageIdent() {
			return GetRuleContext<SendingMessageIdentContext>(0);
		}
		public ITerminalNode CALLS() { return GetToken(Prosr1Parser.CALLS, 0); }
		public ReturningIdentContext returningIdent() {
			return GetRuleContext<ReturningIdentContext>(0);
		}
		public ReturningMessageIdentContext returningMessageIdent() {
			return GetRuleContext<ReturningMessageIdentContext>(0);
		}
		public ITerminalNode ON() { return GetToken(Prosr1Parser.ON, 0); }
		public SendingTargetContext sendingTarget() {
			return GetRuleContext<SendingTargetContext>(0);
		}
		public SendingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sending; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterSending(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitSending(this);
		}
	}

	[RuleVersion(0)]
	public SendingContext sending() {
		SendingContext _localctx = new SendingContext(Context, State);
		EnterRule(_localctx, 10, RULE_sending);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(ACTION);
			State = 81; sendingIdent();
			State = 82; Match(T__5);
			State = 83; sendingMessageIdent();
			State = 84; Match(T__6);
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CALLS) {
				{
				State = 85; Match(CALLS);
				State = 86; returningIdent();
				State = 87; Match(T__5);
				State = 88; returningMessageIdent();
				State = 89; Match(T__6);
				State = 90; Match(ON);
				State = 91; sendingTarget();
				}
			}

			State = 95; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendingMessageIdentContext : ParserRuleContext {
		public MessageIdentContext messageIdent() {
			return GetRuleContext<MessageIdentContext>(0);
		}
		public SendingMessageIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendingMessageIdent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterSendingMessageIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitSendingMessageIdent(this);
		}
	}

	[RuleVersion(0)]
	public SendingMessageIdentContext sendingMessageIdent() {
		SendingMessageIdentContext _localctx = new SendingMessageIdentContext(Context, State);
		EnterRule(_localctx, 12, RULE_sendingMessageIdent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 97; messageIdent();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendingTargetContext : ParserRuleContext {
		public SendingTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendingTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterSendingTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitSendingTarget(this);
		}
	}

	[RuleVersion(0)]
	public SendingTargetContext sendingTarget() {
		SendingTargetContext _localctx = new SendingTargetContext(Context, State);
		EnterRule(_localctx, 14, RULE_sendingTarget);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			_la = TokenStream.LA(1);
			if ( !(_la==T__7 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturningContext : ParserRuleContext {
		public ITerminalNode CALLS() { return GetToken(Prosr1Parser.CALLS, 0); }
		public ReturningIdentContext returningIdent() {
			return GetRuleContext<ReturningIdentContext>(0);
		}
		public ReturningMessageIdentContext returningMessageIdent() {
			return GetRuleContext<ReturningMessageIdentContext>(0);
		}
		public ITerminalNode ON() { return GetToken(Prosr1Parser.ON, 0); }
		public ReturningTargetContext returningTarget() {
			return GetRuleContext<ReturningTargetContext>(0);
		}
		public ReturningContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returning; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterReturning(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitReturning(this);
		}
	}

	[RuleVersion(0)]
	public ReturningContext returning() {
		ReturningContext _localctx = new ReturningContext(Context, State);
		EnterRule(_localctx, 16, RULE_returning);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(CALLS);
			State = 103; returningIdent();
			State = 104; Match(T__5);
			State = 105; returningMessageIdent();
			State = 106; Match(T__6);
			State = 107; Match(ON);
			State = 108; returningTarget();
			State = 109; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturningMessageIdentContext : ParserRuleContext {
		public MessageIdentContext messageIdent() {
			return GetRuleContext<MessageIdentContext>(0);
		}
		public ReturningMessageIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returningMessageIdent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterReturningMessageIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitReturningMessageIdent(this);
		}
	}

	[RuleVersion(0)]
	public ReturningMessageIdentContext returningMessageIdent() {
		ReturningMessageIdentContext _localctx = new ReturningMessageIdentContext(Context, State);
		EnterRule(_localctx, 18, RULE_returningMessageIdent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 111; messageIdent();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturningTargetContext : ParserRuleContext {
		public ReturningTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returningTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterReturningTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitReturningTarget(this);
		}
	}

	[RuleVersion(0)]
	public ReturningTargetContext returningTarget() {
		ReturningTargetContext _localctx = new ReturningTargetContext(Context, State);
		EnterRule(_localctx, 20, RULE_returningTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageContext : ParserRuleContext {
		public ITerminalNode MESSAGE() { return GetToken(Prosr1Parser.MESSAGE, 0); }
		public MessageIdentContext messageIdent() {
			return GetRuleContext<MessageIdentContext>(0);
		}
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public MessageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterMessage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitMessage(this);
		}
	}

	[RuleVersion(0)]
	public MessageContext message() {
		MessageContext _localctx = new MessageContext(Context, State);
		EnterRule(_localctx, 22, RULE_message);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(MESSAGE);
			State = 117; messageIdent();
			State = 118; Match(T__3);
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << REPEATED) | (1L << TYPE) | (1L << IDENT))) != 0)) {
				{
				{
				State = 119; field();
				}
				}
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 125; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public TypeIdentContext typeIdent() {
			return GetRuleContext<TypeIdentContext>(0);
		}
		public FieldIdentContext fieldIdent() {
			return GetRuleContext<FieldIdentContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(Prosr1Parser.NUMBER, 0); }
		public ITerminalNode REPEATED() { return GetToken(Prosr1Parser.REPEATED, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitField(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 24, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REPEATED) {
				{
				State = 127; Match(REPEATED);
				}
			}

			State = 130; typeIdent();
			State = 131; fieldIdent();
			State = 132; Match(T__0);
			State = 133; Match(NUMBER);
			State = 134; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeIdentContext : ParserRuleContext {
		public PackageIdentContext packageIdent() {
			return GetRuleContext<PackageIdentContext>(0);
		}
		public MessageIdentContext messageIdent() {
			return GetRuleContext<MessageIdentContext>(0);
		}
		public ITerminalNode TYPE() { return GetToken(Prosr1Parser.TYPE, 0); }
		public TypeIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIdent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterTypeIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitTypeIdent(this);
		}
	}

	[RuleVersion(0)]
	public TypeIdentContext typeIdent() {
		TypeIdentContext _localctx = new TypeIdentContext(Context, State);
		EnterRule(_localctx, 26, RULE_typeIdent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				{
				State = 136; packageIdent();
				State = 137; messageIdent();
				}
				break;
			case TYPE:
				{
				State = 139; Match(TYPE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuoteContext : ParserRuleContext {
		public QuoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quote; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterQuote(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitQuote(this);
		}
	}

	[RuleVersion(0)]
	public QuoteContext quote() {
		QuoteContext _localctx = new QuoteContext(Context, State);
		EnterRule(_localctx, 28, RULE_quote);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			_la = TokenStream.LA(1);
			if ( !(_la==T__9 || _la==T__10) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldIdentContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(Prosr1Parser.IDENT, 0); }
		public FieldIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldIdent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterFieldIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitFieldIdent(this);
		}
	}

	[RuleVersion(0)]
	public FieldIdentContext fieldIdent() {
		FieldIdentContext _localctx = new FieldIdentContext(Context, State);
		EnterRule(_localctx, 30, RULE_fieldIdent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullIdentContext : ParserRuleContext {
		public ITerminalNode[] IDENT() { return GetTokens(Prosr1Parser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(Prosr1Parser.IDENT, i);
		}
		public FullIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullIdent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterFullIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitFullIdent(this);
		}
	}

	[RuleVersion(0)]
	public FullIdentContext fullIdent() {
		FullIdentContext _localctx = new FullIdentContext(Context, State);
		EnterRule(_localctx, 32, RULE_fullIdent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(IDENT);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 147; Match(T__11);
				State = 148; Match(IDENT);
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HubIdentContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(Prosr1Parser.IDENT, 0); }
		public HubIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hubIdent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterHubIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitHubIdent(this);
		}
	}

	[RuleVersion(0)]
	public HubIdentContext hubIdent() {
		HubIdentContext _localctx = new HubIdentContext(Context, State);
		EnterRule(_localctx, 34, RULE_hubIdent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageIdentContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(Prosr1Parser.IDENT, 0); }
		public MessageIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageIdent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterMessageIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitMessageIdent(this);
		}
	}

	[RuleVersion(0)]
	public MessageIdentContext messageIdent() {
		MessageIdentContext _localctx = new MessageIdentContext(Context, State);
		EnterRule(_localctx, 36, RULE_messageIdent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageIdentContext : ParserRuleContext {
		public ITerminalNode[] IDENT() { return GetTokens(Prosr1Parser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(Prosr1Parser.IDENT, i);
		}
		public PackageIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageIdent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterPackageIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitPackageIdent(this);
		}
	}

	[RuleVersion(0)]
	public PackageIdentContext packageIdent() {
		PackageIdentContext _localctx = new PackageIdentContext(Context, State);
		EnterRule(_localctx, 38, RULE_packageIdent);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 158; Match(IDENT);
					State = 159; Match(T__11);
					}
					} 
				}
				State = 164;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturningIdentContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(Prosr1Parser.IDENT, 0); }
		public ReturningIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returningIdent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterReturningIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitReturningIdent(this);
		}
	}

	[RuleVersion(0)]
	public ReturningIdentContext returningIdent() {
		ReturningIdentContext _localctx = new ReturningIdentContext(Context, State);
		EnterRule(_localctx, 40, RULE_returningIdent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendingIdentContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(Prosr1Parser.IDENT, 0); }
		public SendingIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendingIdent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.EnterSendingIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProsr1Listener typedListener = listener as IProsr1Listener;
			if (typedListener != null) typedListener.ExitSendingIdent(this);
		}
	}

	[RuleVersion(0)]
	public SendingIdentContext sendingIdent() {
		SendingIdentContext _localctx = new SendingIdentContext(Context, State);
		EnterRule(_localctx, 42, RULE_sendingIdent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1A', '\xAC', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', '\x31', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x34', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x42', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x6', '\x6', 
		'M', '\n', '\x6', '\r', '\x6', '\xE', '\x6', 'N', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '`', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x5', '\b', '\x65', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x5', '\v', 's', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '{', '\n', '\r', '\f', '\r', 
		'\xE', '\r', '~', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x5', '\xE', '\x83', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x8F', '\n', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x98', '\n', '\x12', '\f', 
		'\x12', '\xE', '\x12', '\x9B', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', 
		'\xA3', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\xA6', '\v', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x2', '\x2', '\x18', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '\x2', '\x4', '\x3', '\x2', '\n', '\v', '\x3', '\x2', 
		'\f', '\r', '\x2', '\xA2', '\x2', '.', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x6', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x43', '\x3', '\x2', '\x2', '\x2', '\n', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'R', '\x3', '\x2', '\x2', '\x2', '\xE', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x66', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'h', '\x3', '\x2', '\x2', '\x2', '\x14', 'r', '\x3', '\x2', '\x2', '\x2', 
		'\x16', 't', '\x3', '\x2', '\x2', '\x2', '\x18', 'v', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x82', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x90', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\"', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x9C', '\x3', '\x2', '\x2', '\x2', '&', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xA4', '\x3', '\x2', '\x2', '\x2', '*', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xA9', '\x3', '\x2', '\x2', '\x2', '.', '\x32', 
		'\x5', '\x4', '\x3', '\x2', '/', '\x31', '\x5', '\x6', '\x4', '\x2', '\x30', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x35', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', '\x2', '\x2', 
		'\x3', '\x36', '\x3', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', 
		'\xF', '\x2', '\x2', '\x38', '\x39', '\a', '\x3', '\x2', '\x2', '\x39', 
		':', '\x5', '\x1E', '\x10', '\x2', ':', ';', '\a', '\x4', '\x2', '\x2', 
		';', '<', '\x5', '\x1E', '\x10', '\x2', '<', '=', '\a', '\x5', '\x2', 
		'\x2', '=', '\x5', '\x3', '\x2', '\x2', '\x2', '>', '\x42', '\x5', '\b', 
		'\x5', '\x2', '?', '\x42', '\x5', '\n', '\x6', '\x2', '@', '\x42', '\x5', 
		'\x18', '\r', '\x2', '\x41', '>', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\a', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\x10', 
		'\x2', '\x2', '\x44', '\x45', '\x5', '\"', '\x12', '\x2', '\x45', '\x46', 
		'\a', '\x5', '\x2', '\x2', '\x46', '\t', '\x3', '\x2', '\x2', '\x2', 'G', 
		'H', '\a', '\x12', '\x2', '\x2', 'H', 'I', '\x5', '$', '\x13', '\x2', 
		'I', 'L', '\a', '\x6', '\x2', '\x2', 'J', 'M', '\x5', '\f', '\a', '\x2', 
		'K', 'M', '\x5', '\x12', '\n', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 
		'L', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', '\a', '\x2', '\x2', 
		'Q', '\v', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\x13', '\x2', 
		'\x2', 'S', 'T', '\x5', ',', '\x17', '\x2', 'T', 'U', '\a', '\b', '\x2', 
		'\x2', 'U', 'V', '\x5', '\xE', '\b', '\x2', 'V', '_', '\a', '\t', '\x2', 
		'\x2', 'W', 'X', '\a', '\x14', '\x2', '\x2', 'X', 'Y', '\x5', '*', '\x16', 
		'\x2', 'Y', 'Z', '\a', '\b', '\x2', '\x2', 'Z', '[', '\x5', '\x14', '\v', 
		'\x2', '[', '\\', '\a', '\t', '\x2', '\x2', '\\', ']', '\a', '\x15', '\x2', 
		'\x2', ']', '^', '\x5', '\x10', '\t', '\x2', '^', '`', '\x3', '\x2', '\x2', 
		'\x2', '_', 'W', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\a', 
		'\x5', '\x2', '\x2', '\x62', '\r', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x65', '\x5', '&', '\x14', '\x2', '\x64', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'g', '\t', '\x2', '\x2', '\x2', 'g', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', '\x14', '\x2', '\x2', 'i', 
		'j', '\x5', '*', '\x16', '\x2', 'j', 'k', '\a', '\b', '\x2', '\x2', 'k', 
		'l', '\x5', '\x14', '\v', '\x2', 'l', 'm', '\a', '\t', '\x2', '\x2', 'm', 
		'n', '\a', '\x15', '\x2', '\x2', 'n', 'o', '\x5', '\x16', '\f', '\x2', 
		'o', 'p', '\a', '\x5', '\x2', '\x2', 'p', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'q', 's', '\x5', '&', '\x14', '\x2', 'r', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 's', '\x15', '\x3', '\x2', 
		'\x2', '\x2', 't', 'u', '\a', '\v', '\x2', '\x2', 'u', '\x17', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\a', '\x11', '\x2', '\x2', 'w', 'x', '\x5', 
		'&', '\x14', '\x2', 'x', '|', '\a', '\x6', '\x2', '\x2', 'y', '{', '\x5', 
		'\x1A', '\xE', '\x2', 'z', 'y', '\x3', '\x2', '\x2', '\x2', '{', '~', 
		'\x3', '\x2', '\x2', '\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '|', 
		'}', '\x3', '\x2', '\x2', '\x2', '}', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'~', '|', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\a', '\a', '\x2', 
		'\x2', '\x80', '\x19', '\x3', '\x2', '\x2', '\x2', '\x81', '\x83', '\a', 
		'\x16', '\x2', '\x2', '\x82', '\x81', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x85', '\x5', '\x1C', '\xF', '\x2', '\x85', '\x86', '\x5', 
		' ', '\x11', '\x2', '\x86', '\x87', '\a', '\x3', '\x2', '\x2', '\x87', 
		'\x88', '\a', '\x19', '\x2', '\x2', '\x88', '\x89', '\a', '\x5', '\x2', 
		'\x2', '\x89', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x5', 
		'(', '\x15', '\x2', '\x8B', '\x8C', '\x5', '&', '\x14', '\x2', '\x8C', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8F', '\a', '\x17', '\x2', 
		'\x2', '\x8E', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x91', '\t', '\x3', '\x2', '\x2', '\x91', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x93', '\a', '\x18', '\x2', '\x2', '\x93', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x99', '\a', '\x18', '\x2', '\x2', '\x95', 
		'\x96', '\a', '\xE', '\x2', '\x2', '\x96', '\x98', '\a', '\x18', '\x2', 
		'\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\a', 
		'\x18', '\x2', '\x2', '\x9D', '%', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x9F', '\a', '\x18', '\x2', '\x2', '\x9F', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\xA1', '\a', '\x18', '\x2', '\x2', '\xA1', '\xA3', '\a', 
		'\xE', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xA8', '\a', '\x18', '\x2', '\x2', '\xA8', '+', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xAA', '\a', '\x18', '\x2', '\x2', '\xAA', '-', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x32', '\x41', 'L', 'N', '_', '\x64', 'r', 
		'|', '\x82', '\x8E', '\x99', '\xA4',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
